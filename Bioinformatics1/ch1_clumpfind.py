
# To find the clump (replication origin)
def ClumpFinding(Genome, k, L, t):
    frequentPatterns = []
    clump = []
    for i in range(4**k) :
        clump.append(0)
    text = Genome[:L]
    FrequencyArray = ComputingFrequencies(text, k)
    for i in range(4**k):
        if FrequencyArray[i] >= t:
            clump[i] = 1
    for i in range(len(Genome)-L+1):
        FirstPattern = Genome[i-1:i-1+k]
        index = PatternToNumber(FirstPattern)
        FrequencyArray[index] = FrequencyArray[index]-1
        LastPattern = Genome[i+L-k: i+L]
        index = PatternToNumber(LastPattern)
        FrequencyArray[index] = FrequencyArray[index]+1
        if FrequencyArray[index] >= t:
            clump[index] = 1
    for i in range(4**k):
        if clump[i] == 1:
            Pattern = NumberToPattern(i, k)
            frequentPatterns.append(Pattern)
    return frequentPatterns

# compute and get the list of the frequencies
# of each k-mer pattern in a given text
def ComputingFrequencies(text, k):
    freqArray = []
    for i in range(4**k):
        freqArray.append(0)
    for i in range(len(text)-k+1):
        pattern = text[i:i+k]
        j = PatternToNumber(pattern)
        freqArray[j] = freqArray[j]+1
    return freqArray

# convert pattern to number
def PatternToNumber(pattern):
    score = {'A':0, 'C':1, 'G':2, 'T':3}
    result = 0
    tens = 0
    for nt in pattern[::-1] :
        result += (4**tens)*score[nt]
        tens += 1
    return result

# convert number to pattern with given k-mer length
def NumberToPattern(i, k):
    rescore = {0:'A', 1:'C', 2:'G', 3:'T'}
    temp = ''
    for n in range(k)[::-1]:
        temp += rescore[i/(4**n)]
        i = i-(i/(4**n))*(4**n)
    return temp

'''
# examples
print PatternToNumber('GT')
print NumberToPattern(11, 2)

print PatternToNumber('ATGCAA')
print NumberToPattern(5437, 7)
print NumberToPattern(5437, 8)
print ComputingFrequencies('ACGCGGCTCTGAAA', 2)


f = open('dataset_2994_ans.txt', 'w')
for i in ComputingFrequencies('ATTGGAGCGAAAAAGCGGGGACGCCAGGAGCGGCTGGAAGCTCGGGACGACAGAGTAATCGAGCTCCTGTCGACATGGGTTCTTCTCCGAACGGTGTTTCCGCCTGGGCAAGAATAACGGTTCCTACGGGCACCGAGTGGTGCTGGAGTCATTATCCTTGTGCAGGAAGTCAATATGACTGTAGTCTTATGCACGGCTTTATCCCGTTAGCACTAATGTTTTCGAGGGCACTTGTCAGCCTAGGATTTACTTGCAGAAGCGTAAGCTGTTAAAGACACATGGTATACAAAATACACACCGTGCCCAAAGGTTGGCGAGAACTGATCGTCCAATCATAGCGCGTTGACAGACAAATTATGCATTAGAAGAGTATCGACTAGTTAAGATTTGGGTACCAGCAGAGTCCGCCTGATTGTTACCAGGCGGACAGACACGAGATCCGATAACCCAACAATGTTTGATGGGCAACCGGCGGACCAGGGCCCAAAGGTAAACAAGCATGTCCGAAGAGTTTACTTATATTAGAGCGCTCACGTACTATCTTAGGCGAGCAACATCGCCTCCGATGCTCGCTATTTGGCCCGGGGGGGTCGCCAGACCTCTGTAGCCACATGTCATTAACCTTGAAGCTGATCCCCTTGTTGTGGGACCCTCTGCACAGCCCATTCTGTAGACTGAGAGTGCCGAGTTGCTCGGTATAGGGAAGTCACACAACTCTCAGTGG', 6):
    f.write(str(i))
    f.write(' ')
f.close() 


print ClumpFinding('CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA', 5, 50, 4)
print ClumpFinding('AAAACGTCGAAAAA', 2, 4, 2)
print ClumpFinding('ACGTACGT', 1, 5, 2)
print ClumpFinding('CCACGCGGTGTACGCTGCAAAAAGCCTTGCTGAATCAAATAAGGTTCCAGCACATCCTCAATGGTTTCACGTTCTTCGCCAATGGCTGCCGCCAGGTTATCCAGACCTACAGGTCCACCAAAGAACTTATCGATTACCGCCAGCAACAATTTGCGGTCCATATAATCGAAACCTTCAGCATCGACATTCAACATATCCAGCG', 3, 25, 3)


seq = 'CACCCCCGTGCCAGACCCCGCGGTTATATTACGGGGGAATTAAGGTCACGATTTACCGACGCAGGAGTGGGCCGGCACTAGGACTTCATCACCCATGACAGTCAGGGTGTGTACGCCAATATAGCTAACATTCTCTTGCAGTTTTGCGAATGCCCCTCGGCATACAGCAAGTTTCGTCGTCCTTTCTTAATCCAATTCGCGCTCGCGTTTTGTGGGACGGTAATGTTGGTCCGCTTAACCTGCGTCTACGTGACGTGTACATTGTATTGCTTTAACTCAACGCGATCACAGGGATGAAACCAAGCCTCCCTACGATCACAGACTTCCAATGATTCGCAGCATTCAGCTTGCCTATCTTCGATCACAGCACGATCACAGCGATCACAGAGCGTGTCGATCACCGATCACAGCGGGGCCTCATTACCGATCACAGACTCATGGCCGCGATCACAGAGGCATACTTGCGGGAAGCGGGGTCCCGATCACAGAGGGGGGGATAGCGTGCATCGGTCGATCACGATCACAGTGTCGTCGGACCGATCACAGCCCGATCACAGCTCGACGAGACCGATCACAGGTAACACGATCACAGGGATGTCATTGTCTGAGATGGAGAGTGGGCCCTTTGTCTAAAAGGACGATCACAGACGCGATCACAGTGGTCTCAGTTGCTGCGATCACGATCACAGACTCGACCAGGTGAAACAACGCCGTGCAAGAAATAGGAGTATGTCGGACGATCACAGGGACTCTCGTTATGAGGGGCCTCTGCCACGATCACAGAATCAGTCGATCACAGATGGTCTCGATCACAGCTTTATCGTACCGGTCGATCACAGCGAAATTAACGATCACAGGAGAACGGTTCAAGGCCTACGCTTGACCTGGTCCATGCGAGCTGGGGTTCCCTTATAGTGACCAAACAAAAAGGCGTTGGGAGTTCACACATAACCCAACTGGCAATGGATTCAAAGTTAGCTTCCACCCTATATTCGACTTCGTCAAGCCAAAACCGTAGCAGTGACGGTGTTTCTCCGCAGTCGGGATTCCGTTGCTTCAACTGGACCATAGCGCAGTAGATCCAGCCCACACCCTAATTACACACATAGAAGCTTTCCTCATAACCCTTGTTCGTTGGCCCATGTGTATCGTACGTATGCGGTTGACCCTTCATGGTACAGGTTATCGTCCTCACCGCATCCTGATACGTTTCGGTCACGACTATCCTAGCAGTTGGATTAGAGACGCTGTCGTAAAACTCCGACACAATTCGGTTGTCGTAGGTCACTACACGCTTTCCGAGTTTTCACTCCATGTACACCCACAAGATCAATACTCGGCAGCCTCACAGTAGCGTTCCAACTCGTGGCCAGCAATCAGGCGTGATAATAGAGACCAGACCCAACCCTGGGATCAGCAACTGGGCCTTTACACCGTATTAAATTGATTACCAGGCGTACCATTTTCAGCAATGCACGGGAACGTAGACGCTGATATGGCACATTCTATATGGTGCGGCGTAGATATAGTGTATTGCGTATTTAGGCTTATGGCTCGGACATATCGAACCATGCTTATGTCGGAGAGGCACTATGGTTCAAGCAGTTCATGTCACACGCACAAATGCTCGTGGTATGTATGAGGAGGGCCTCTGCCAATTGACAATATTGATCTGATGCCAATCTCGCTGTCAATTGTCTGGTATTTACTTTCGCCGCCGTACAATAGAGTTTTTAATCGGGGCGCGCACCTATAGGAGCCCCATCCGGCAGCCAATTCACAAACGGGGAGTAGATACACAATGCACCGATCATTCCCAAACGCACAACTCAAAAATAATGTGATATTAAACCCCAGGGATGGTAGTCGAACAGCAAAACTCATGCGATCAGAAAGTGGTCGGACTGTTTCCAGTCTTCTATCATTGCGGGGATGCCGTTGTGCTGGGCTAGTAAGTAAGTTGCTGACGTCCGGTCAGACGTGGCCTGTTAGCCGTTCCTTCGCGAGCGGAAGACTCCATACTGGGGAATCCGTTATGATACGGATTAGCCATTCGACCTGAGGTAGAGGTCCAGTGAGCTGGCGGGATAGGGCCATGCACAGTCTTGCACACTATGCCGAGCGTTTGAATCGTGTGTCTGTTCCCTCCAAGGCCAGCACAGGGAATTCTCAGACGGGTTTCCATACTTAAGCAACGCGCCGCGTTCAACCCTAGATTTCGTGCCTGGGCTGACGATGGATGCTGAACCTAGGTAGCCCAGCGTCTTTAACCACTCTCCTCGAACAGGGGCGAGTTTGAAAACAGGTACGCAGCATTGGGGCGTAAAGCTATCACCATTCCATGTCGTGGACCCTCTGTTCGTATCTTTCGTGGACCTCGTGGATCGTGGACCGTGGACCAGCACCTGCATCCTTCGTGGACCGTCACAAGGTCGTGGACCTGGACCAGAGAGCTCGTGGACCTGGACCACCTGCGCACCGCACCTGCTCGTTCGTGGACCCGTATCACGACGGTTTAGCACCTTCGTGGACCATGAGACTATAATTCGTGGACCGCGGCCGTCCCAACCACGCGCACCTGTCGTGGACCGGACCTAAACGTGTCGTGGACCGCACGAGAGCACCTGCAACGGTAGATATGGCACCTGCACGAACGGCAGCACCTGCAGCAGGCACCTGCACCTCGTGGACCTCGTGGACCCCTGGCACCTGCACACTCTACACTCGTGGACCGTCGTGGACCCAGGTACTTGCACCTGCATCCACAGCACCTGGCACCTGCAATGGCCAGTATGCACGCACCTGCACTGCATTCAAACATGGATTCGTCGTGGTCGTGGACCTGCACCTCGTGGACCCCCGATTTCGTGGACCAGCAGGTAATTATGAACAGGCAAGGCTTAAAATCCGTGCACCTGCACTAAATTTGAACCTCAACTTCGCACCTGCACTGCACTGTTCTCGTGTGACCGTAAGCCCTGTAACAGGCCTTGATGCGGCGCTCTGAGTGAGTAAGGTTCCTATTTAGATCGGTACTAGTCATCTTATAACATCCGGTCGTAACCTCGCGAGGAGCTGCCTGCGCACGGAGTTCGCAGTGTGGATGTAAAGCCTTGTAGATCCTGCGCCGTCCCAGAAGAAATAGACGCATCGCGATTGGACGGAAGGCGCTTCGCAGCCTATCTACCGAACTAAGCGAATCCCAGCCGCTCTACATTAGCCCTATGGATTTTGCTCTACAGCTCTACATCATAGCTCTACATTATTCGCTCTACATAAAATCAACCCTCACTGCGGCACCGTAGACCAAAGCTCTACATCGGGTTCGGGCTCGCTCTACATATGCTCTACATTCTACATGGCCTACAGGCTCTACATCTTGCTCTACATTTCAGATTGCTCTACATTGTAGGTGAGGTGCCGGCTCTACATGCAGCTCTACATGCATAGCACGCTCTACATCGGGCCCGCATTGGCCCGCTCTACATGAAGGACCAGCGTAAGGCGTGTGACGGTCCAATGGCTCTACATTGGTTGTACTTATACGGGCTCTACATGGCGGATGGTACTCGCCTGCGTGGCCCTATGCGCGATTTCGAGGAGACCGACAGCTCTACATTAGAGCTCTACATCCACTTGTGCGTGCTCTACATATCTCTTCTGGAGCCCGTGTGCTGCTCTACATTATAGAGAGCGGTGCTCTACATTACCCACTACTGGCATGACAGCTCTACATATCGCTCTACATCTTCGCTGTACTGCTGCGGGTTCTTCACCTCCGCAGAGATATTTACGACTTTGGGAGTGCAGAATTTTGTCGGTAGAACTTCAGCCATACGGAACTATAGAAACTCATCTTTGCCCTTACGCTAGGAGGGGGGGCGTGCACATCATTCTCGTGATGCAGCTACTCTAGGACCGGCGTAGCATGTAACATTGACCGGGGATGGGCGCGGAATGGGTCTCGCGCGCGAGCTCACCTCACGCGAGCTCCACGCGAGCTCTCAGCTACTACAGATCAGATCTCTTTCAGATCTCTTCTCTTCTCTAGATCTAGATCTCTTAGCTCAAAATCCTTTTTCTTTAAACCGAGATCTCTTAGATCTCAGATCTCTTACATTATCGAGATCTCTTCTCCCGCGAGAAGATCTCTTTATAGATCTCTTTGCTCGTGCTCGCGAGCTCAAGCATAGATCTCTTGGAGTGCACCCGAAATCTGAGTTACCAGAAGATCTCTTAAGATCTCTTATCTCTTTCTTTTAAGATCTCTTGCGAGATCTCTTACCGCGAGCTCGCGAGCTCGCCCACGCGAGCTCTCGCGAGCTCCGCGAGCTCTGACTCTAATCGCGAGCTCGAGATCTCTTGCGAGCTCCTTCATGTTTTATTTCTGCGCGAGAGAGATCTCTTCTCTAGGGCGAGAGGAATTCTCCGCGAGCTCCCTGTGAGCAGATCTCTTTGCCACGCGAGCTCGGACCTGAAGCAAGATCTCTTCTTCTGAAGATCTCTTCCCTTAGCAGGACTAGATCTCTTGCAGAAGCAGACGCGAGCGCGAGCTCGAGCAGACTGTGAACACCTACTAGCACGGAGGACGCATTAGGTAGCAGACTGCTCTGAGTAAAGTCTGTGTAGCAGACTGCTGCTGAGCAGACTGGACTGTCATGGGACGCATTAGTAGCAGACGACGCATTAGACGAGAGCAGACTGCAGGACGCAGACGCATTAATTATTATTACATATAGCTCAAGCAGACTGTAATATTCTAAGGAGCAGACTTATCTGCGCGTGCAGCTATCTGCGGACGCATTAGCTTAGACGCATTAAGACGCATTAGACGGAAACAAAGAATGTTATCTGCGCATCTGCGCTGCGCCTGAGACTGCTGCACAACGAAATGACGCATTAATCTGCGCAGATTAATGAATTTATCTGACGCATTATATCTGGACGCATTACTGGATCACATAAGCAGACTGAAGCAGACTGAGCTTATATCTGCGCCTGCTGAAGTGACGCATTAGACGCATTAAAGCTGGACGCATTATATATCTGGACGCATTATGCGACGCGACGCATTAATTATGACGCATTAACGCATTATCGACGCATTATATCGACGCATTATGCGCTATCTGCGCCGACGCATTATTCATGGACGCATTACAGGCCTTATCTGACGGACGCATTACGCGCGCTCTGCGCGCGACGCGAAAACGTTAAGGCGTGTATTCCACTTAATAGCCGGCGGTGCTAGGACACTATCTGCGCAAATATCTGCGCAAATAGCCCTTACGCCGCAGCCGCACATAGTACAAATAGCCCATAGCCCTAGCTCTTTACCGTAAAGGGAACGACGTTATATCGTGCTGTGCATGAGATTTAAAAATAGCCCCAGAGGAAGAGCATAAAATAGCCCTTCGACCCAAAAATAGCCCGCCCTGAAATAGCCCGCATAAATAGCCCGAAATAGCCCGCCGTTTTAAATAGCCCATCGGAGTGAAATCACCGTCCCAAAATAGCCCTGGCGACAATGCTGAAAATAGCCCTTGAAGGACGTCGTGCGAGCCGCATCCAAATAGCCCTACTGATCTATCTCTGAGAAATAGCCCAGCTCGCGACTGTCAGCGCCTTGCGATCGAGGAACCGAGAAATAGCCCGCTGGAAAAAATAGCCCATAGCCCGCCCGTGAAATAGCCCCTGGTTTGGAGTTAGCGACAGTTGTAACAAATAGCAAATAGCCCTAAATAGCCCAGTAAACAAATAGCAAATAGCCCACTCTAGCTGGTCCGTCATTCTGACAAGCCGCCATAGGCAAAACCTCAATTAACCTATCGCGCAGAACGACAGGAATCATAGACCACAGCCTTCCATAAGTACGACAAGTTCAAACTTACTTTGACGGTGGGTAGGATACGTATTTTAAAACTCTCGGGTTCAGGGACAAACACGGCGGGCTACCTCTATCAGAAGAACCGTCCAGTAAGGCCCATCTTAGATGATTCTATCTGCGTACTGGCAATGTGCCTTACTTAAAAGCTAGTGCTCCTCCGGCCATGTACCGGGGTCCTGCTGTATATTGTATGTTGACCACTTTTCCGTTCGCGTTTACAGAACCACTCTCCATCAAGGACTAGCAGCATGCTCTCAGTGTTAGGGTGTTAACCTCTCCTCGAGCGAACAACCATAGCCTACACATCGCCAGTCTCTCGGCTTCCACAAGGTGAGAACCGCTCCTGCGATACTTTAGGGCCGCCCATTGTTGCCACCTGTCTACGTTTCTCATTTCCGCTTGTATCCCGGGGAAGAGAACTGCCTGTGTGGGCGAGTATGCACCAACCCCCGTCCCGTTCCGCCACCACTAAAGACCTAGGGCTATCTGGCTAGGTATGTTAAGCTTTCCACGCAGGGCATCACGTTGACCCCATTTAATCCGGTGTGGGACTGGCACCATTGCGAAAAGGTATTTTCTTAACCCTACAGGCGCAAAGAAGATCATTATGGAGCTCAGAGCAATTCTTATGGATTCTAGTCCTATGGCCAGTATATAGATGTGGATGAGGCAAAGCCGCGTAACGATCTTCCTTTACCGGACCGGTAGGTGTCAGGATTCTGCGAGCGGGGGCAGCTAAGGGGTGTAGGTTCTCGAAATCGCCGCTAGCGGCAACGACCAGCCCTGGCATCTACAGGCTCCAAAGTTGCCCGTCTACTTGGTCCAATGATTTCACCGGAAGAACAAACCTCCGTTGTGAATCCCATCATGCATAGATGTCAGGCTATGGGACACGGTAAAGGTGTAGGGTACGGTTATAGCCAGAATTTTGACTTCGCAGCCGAACTTATCATGCGGGTTCCCAATGATTCCGAGGTGCTTTACGTGACTGATTGCTACTGGCAGCACCGCTGAGAACAGGCATCGGACAAGTACCAGGTGCTGCGTTTATGTGTCTAGCCTGTAACGCCCATGGAATCATGGCCACACCGTAACTCTGCTTTCGGAAGATTATAAATTGGATTTCTTTGTAATACTGGTGCCGTGAAAAGCTCCCTAGCATCGGCTCCGGCTCCCGTATTCTTACTATAGGCGCCTACTGTCTTCCCCGCTCCAGAATTCCGTGACGGTAAGTAGTCCAGTGGTGCCCGGAAATTAGTCATAAGGGTTGAAGGAAGTTGTAAACGGGTTGAAGTCGGGGGTTGAAGGGTCCGCTCGGCAATCGTCTTGCGCAGCGGGTTGAAGAGCCAGGTGCGGCTAGCAGGGGTTGAAGATTCTCCGGGGGGTTGAAGTGAAGGAGCGGTTCTAAGGGTTGAAGAGGGTTGAAGTGAAGGGTGTGGGTTGAAGAACAGGGTTGGGTTGAAGTTAGGCGTCCGACGTCAACTCAAATCATCGGACATTCAAACCCTCCTGCGCCTAATTGCCGGTGGTGATCATTCTGGACATCAGGAACCCCAAGAAGGGTTGAAGGAGCTCAAAATGGCGACGGGGTTGAAGGTTGAAGCGCTCTATACAATGGGTTGAAGAAGTTATAGATTCTAGTGCTTACTGTCGTCATTGGGTTGAGGGTTGAAGCATAACGGCAGCGGGTTGAAGTAAGCTGGGTTGAAGAGGTAGGATTAAGGTGTTTCTATCCGGGTTGAAGAAGGGTTGAAGACTGGTTAAGCTGGGTTGAAGCACTCAAATTACCCTACACCACCGGGAACAGGTACGACCAGGGTTGAAGCTATAGGGGTTGAAGTGCTGTTCTTGGTTGAGTTATGCGCTTAGTAGTCTCTTGATATCCGCGCTCGATAAACAGTATGATTATTGGTAAGATATGTTTAATAAATTAACGGCGGCTTTTCCGTAGTTGTACTAACCGTTGAGCTTTCCTGCATCATTTCAGCGGCTGCCGGTACATGCATGAACATGATGAACCGCGAACAAAGTCTGTATTGTAATATCGTAGCAGATAGGTACATCACGTGTGAGGAAGTCTACGGCAATTCTGTGCGCCTATACAAGTAACAGACATCAGTATAAATTATAACGAATACTCTAAAGTCGGCAATTTGTGCAGCGAGTAAGGGTGATCCATACCATATACGCAAACGGGTCCTGGTGTCCTCGGGCAGTTCACACACCGAGTTCCGCTAGACACAAGTAACCTCAGACGAAAGTTGGTTAGGACGGAGAATCGACTTGCGTATCCCTAGCAAGCTTGAGTGACTCTGCCATCGTCTAATGAATCTCCGGGCGAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCAGCATACCCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGACCGTGCCGTGCCGCGACCGTGCACCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACGACCGTGCCGTGCCGTGCCGACCGTGCCGACCGTGCCGACCGTGCCGACCGTGC'
f = open('dataset_4_5_ans.txt', 'w')
for i in ClumpFinding(seq, 9, 484, 16):
    f.write(str(i))
    f.write(' ')
f.close()
'''

def string(file):   
    f = open(file, 'r')
    dna = ''
    for line in f.readlines():
        line = line.strip()
        dna += line
    return dna

seq = string('E-coli.txt')
print len(ClumpFinding(seq, 9, 500, 3))
